AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ProjectName:
    Description: Project Name
    Type: String
    Default: EasyTODO
  TagName:
    Description: Tag name applied to all resources
    Type: String
    Default: EasyTODO
  ManagementImageId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  DBName:
    Type: String
    Default: app_db
  MasterUsername:
    Type: String
    Default: admin
  MasterUserPassword:
    Type: String
    NoEcho: true
    Description: The master password for the RDS instance
    MinLength: 8
    MaxLength: 41

Resources:
  # =============================
  # VPC
  # =============================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc
        - Key: project
          Value: !Sub ${TagName}
  # =============================
  # Subnet
  # =============================
  ALBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-alb-public-subnet-1a
        - Key: project
          Value: !Sub ${TagName}
  ALBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-alb-public-subnet-1c
        - Key: project
          Value: !Sub ${TagName}
  NATSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.99.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-nat-public-subnet-1a
        - Key: project
          Value: !Sub ${TagName}
  ECSSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.100.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ecs-private-subnet-1a
        - Key: project
          Value: !Sub ${TagName}
  RDSSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.110.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-rds-private-subnet-1a
        - Key: project
          Value: !Sub ${TagName}
  RDSSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.111.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-rds-private-subnet-1c
        - Key: project
          Value: !Sub ${TagName}
  ManagementSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.240.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-management-private-subnet-1a
        - Key: project
          Value: !Sub ${TagName}
  # =============================
  # インターネットゲートウェイ
  # =============================
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-igw
        - Key: project
          Value: !Sub ${TagName}
  # IGWをVPCへアタッチする
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  # =============================
  # NATゲートウェイ
  # =============================
  # プライベートサブネットが外部と通信をするためにNATゲートウェイを作成
  NatGatewayPublic:
    Type: AWS::EC2::NatGateway
    DependsOn: EIP
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP
          - AllocationId
      SubnetId: !Ref NATSubnet
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-nat-gateway-public
        - Key: project
          Value: !Sub ${TagName}
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-eip
        - Key: project
          Value: !Sub ${TagName}
  # =============================
  # ルートテーブル
  # =============================
  # パブリックサブネット用ルートテーブル作成
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public
        - Key: project
          Value: !Sub ${TagName}
  # パブリックサブネット内のリソースががインターネットに接続できるようにするためにデフォルトルート（0.0.0.0/0）を追加し、インターネットゲートウェイ経由で外部へのアクセスを許可する
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # ALBSubnet1とPublicRouteTableを関連づけることで外部とのアクセスを可能にする
  ALBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref ALBSubnet1
  # ALBSubnet2とPublicRouteTableを関連づけることで外部とのアクセスを可能にする
  ALBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref ALBSubnet2
  # NATSubnetとPublicRouteTableを関連づけることで外部とのアクセスを可能にする
  NATSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref NATSubnet
  # プライベートサブネット用のルートテーブルを作成
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-private-routes
        - Key: project
          Value: !Sub ${TagName}
  #NATGateway用のルーティングをプライベートサブネットのルートテーブルに追加する
  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGatewayPublic
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayPublic
  ECSSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref ECSSubnet
  RDSSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref RDSSubnet1
  RDSSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref RDSSubnet2
  ManagementSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref ManagementSubnet
  # =============================
  # 管理用EC2
  # =============================
  # 管理用EC2にセッションマネージャー経由で接続するためのIAMロール
  ManagementEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-ManagementEC2Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-iam-management-ec2-role
        - Key: project
          Value: !Sub ${TagName}
  # IAMインスタンスプロファイルの作成
  ManagementEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ManagementEC2Role
  # 管理用EC2のセキュリティグループ
  ManagementEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for management EC2
      VpcId: !Ref VPC
      SecurityGroupIngress: []
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-management-ec2-sg
        - Key: project
          Value: !Sub ${TagName}
  # 管理用EC2からRDSへのアウトバウンドルール
  ManagementEC2ToRDSSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      GroupId: !Ref ManagementEC2SecurityGroup
      DestinationSecurityGroupId: !Ref RDSSecurityGroup
  # 管理用EC2からALBにアクセスするためのアウトバウンドルール
  ManagementEC2ToALBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      GroupId: !Ref ManagementEC2SecurityGroup
      DestinationSecurityGroupId: !Ref ALBSecurityGroup
  # 管理用のEC2インスタンスの作成
  ManagementEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref ManagementImageId
      SubnetId: !Ref ManagementSubnet
      SecurityGroupIds:
        - !Ref ManagementEC2SecurityGroup
      IamInstanceProfile: !Ref ManagementEC2InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-management-ec2
        - Key: project
          Value: !Sub ${TagName}
  # =============================
  # RDS
  # =============================
  # RDS用のセキュリティグループ
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress: []
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-rds-sg
        - Key: project
          Value: !Sub ${TagName}
  # RDSのサブネットグループ
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref RDSSubnet1
        - !Ref RDSSubnet2
      DBSubnetGroupName: !Sub ${ProjectName}-SubnetGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-rds-subnet-group
        - Key: project
          Value: !Sub ${TagName}
  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub ${ProjectName}-MySQL-RDS
      DBName: !Ref DBName
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      Engine: MySQL
      EngineVersion: 8.0
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false
      MultiAZ: false
      BackupRetentionPeriod: 0
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-rds
        - Key: project
          Value: !Sub ${TagName}
  # =============================
  # ALB
  # =============================
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ApplicationLoadBalancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-alb-sg
        - Key: project
          Value: !Sub ${TagName}
  # ALBリスナー
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80 # ALBが受け付けるポート
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
  # ALBターゲットグループ
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-target-group
      VpcId: !Ref VPC
      Port: 3000 # コンテナで受け取るポート
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /api/hello
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref ALBSubnet1
        - !Ref ALBSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-alb
        - Key: project
          Value: !Sub ${TagName}

Outputs:
  RDSEndpoint:
    Description: DNS Name of RDS
    Value: !GetAtt RDS.Endpoint.Address
    Export:
      Name: RDSEndpoint
  ALBEndpoint:
    Description: DNS Name of ALB
    Value: !GetAtt ALB.DNSName
    Export:
      Name: ALBEndpoint
