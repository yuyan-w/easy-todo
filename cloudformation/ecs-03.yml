AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ProjectName:
    Description: Project Name
    Type: String
    Default: EasyTODO
  TagName:
    Description: Tag name applied to all resources
    Type: String
    Default: EasyTODO
  ApplicationImageTag:
    Type: String
    Description: The tag of the Docker image for the application
    Default: latest

Resources:
  # =============================
  # ECS
  # =============================
  # クラスターの作成
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-cluster
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-cluster
        - Key: project
          Value: !Sub ${TagName}
  # タスク実行IAMロール
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-ecs-task-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EasyTODOTaskExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # ECRからイメージを取得するための権限
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetAuthorizationToken
                Resource: "*"
              # CloudWatch Logsへのアクセス権限
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: "*"
              # パラメータストアからSecureStringを取得するための権限
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:GetParameterHistory
                  - kms:Decrypt
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ecs-task-role
        - Key: project
          Value: !Sub ${TagName}
  # セキュリティグループ
  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS Task
      VpcId: !ImportValue VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !ImportValue ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          DestinationSecurityGroupId: !ImportValue RDSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ecs-task-sg
        - Key: project
          Value: !Sub ${TagName}
  # タスク定義（migration）
  MigrationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: easytodo-migration
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: easytodo-migration
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/easytodo/migrate:${ApplicationImageTag}
          Essential: true
          Environment:
            - Name: NODE_ENV
              Value: "production"
          Secrets:
            - Name: DATABASE_URL
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/easytodo/database-url
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /${AWS::StackName}/ecs/migration
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: easytodo
  # CloudWatch Logsロググループ作成（migration）
  MigrationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /${AWS::StackName}/ecs/migration
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-migration-logs
        - Key: project
          Value: !Sub ${TagName}
  # タスク定義（app）
  AppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: easytodo-app
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: easytodo-app
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/easytodo/app:${ApplicationImageTag}
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: "production"
          Secrets:
            - Name: DATABASE_URL
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/easytodo/database-url
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /${AWS::StackName}/ecs/app
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: easytodo
  # CloudWatch Logsロググループ作成（app）
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /${AWS::StackName}/ecs/app
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-app-logs
        - Key: project
          Value: !Sub ${TagName}
  # ECSサービスの作成
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      ServiceName: !Sub ${ProjectName}-ecs-service
      DesiredCount: 1
      TaskDefinition: !Ref AppTaskDefinition
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: easytodo-app
          ContainerPort: 3000
          TargetGroupArn: !ImportValue ALBTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue ECSSubnet
          SecurityGroups:
            - !Ref ECSTaskSecurityGroup
          AssignPublicIp: DISABLED
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ecs-service
        - Key: project
          Value: !Sub ${TagName}
  # =============================
  # AutoScaling
  # =============================
  # AutoScalingターゲットの作成
  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Sub "service/${Cluster}/${ProjectName}-ecs-service"
      RoleARN: !GetAtt ECSAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  # スケーリングポリシー（CPU使用率が高い場合にスケールアップ）
  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ProjectName}-ScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-autoscaling-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ECSAutoScalingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:GetMetricStatistics
                  - application-autoscaling:*
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-autoscaling-role
        - Key: project
          Value: !Sub ${TagName}

Outputs:
  ECSSecurityGroup:
    Description: SecurityGroup for ECS
    Value: !Ref ECSTaskSecurityGroup
    Export:
      Name: ECSSecurityGroup
